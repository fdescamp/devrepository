/// This class uses the standard Cache %Installer.Installer class to set up
/// a build environment and build project from source code.
/// Please be aware that running this will completely destroy your environment and then recreate it.
/// For security purposes this class will run only against a namespace containing "BUILD" substring.
Class Util.Build
{

/// This is a main build manifest which create new build environment. See documentation for %Installer.Installer
/// on how to use build manifests.
XData BuildManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
<!-- You have to specify JOBNAME with job name via parameter string -->
<If Condition="&quot;${JOBNAME}&quot;=&quot;&quot;"><Error /></If>
<!-- You have to specify SRCDIR with source code directory via parameter string -->
<If Condition="&quot;${SRCDIR}&quot;=&quot;&quot;"><Error /></If>

<!-- Namespace is named JOBNAME-BUILD to avoid wiping non-build namespace -->
<Var Name="NAMESPACE" Value="${JOBNAME}-BUILD" />

<!-- Define QA filepath for db -->
<Var Name="DBDIR" Value="C:/InterSystems/HS20164DEV1/" />

<!-- Delete old namespace and create new one -->
<Namespace Name="${NAMESPACE}" Create="overwrite" 
  Code="${NAMESPACE}" Data="${NAMESPACE}">
<Configuration>
<Database Name="${NAMESPACE}" Dir="${DBDIR}db/${NAMESPACE}/" Create="overwrite" InitialSize="1" ExpansionSize="1" />
 <CSPApplication name="${NAMESPACE}" Directory="${NAMESPACE}" Url="/csp/${NAMESPACE}"
  Description="Build application" 
  Recurse="true" 
  ServeFiles="true"
   AuthenticationMethods="64" />
</Configuration>

<!-- Import build class to new environment -->
<Import File="${SRCDIR}DEMO/Util.Build.cls" Flags="c" />

<!-- Invoke compile method -->
<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
<Arg name="dir" Value="${SRCDIR}DEMO" />
<Arg name="wildcards" Value="*.cls" />
<Arg name="qspec" Value="c" />
<Arg name="errorlog" Value="" />
<Arg name="recursive" Value="1" />
</Invoke>

<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
<Arg name="dir" Value="${SRCDIR}Tutorial" />
<Arg name="wildcards" Value="*.cls" />
<Arg name="qspec" Value="c" />
<Arg name="errorlog" Value="" />
<Arg name="recursive" Value="1" />
</Invoke>

<!-- You may also invoke some post-compile actions like testing or data load here -->




</Namespace>

<!-- Now, dismount database so we can copy database file -->
<!-- This call is invoked in %SYS namespace -->
<!--<Namespace Name="%SYS">
<Invoke Class="SYS.Database" Method="DismountDatabase" CheckStatus="true">
<Arg name="DatabaseDir" Value="${SRCDIR}db/${NAMESPACE}/" />
</Invoke>
</Namespace> -->




</Manifest>
}

/// This method is called to pass parameters into generated build method
ClassMethod Build(pJobName As %String, pSrcDir As %String) As %Status
{
	set vars("JOBNAME")=$g(pJobName)
	set vars("SRCDIR")=##class(%File).NormalizeDirectory($g(pSrcDir))

	Set pLogLevel=3
	Set sc=..RunBuildManifest(.vars, .pLogLevel)

	Quit sc
}

/// This is a standard %Installer method generator whose code is generated by XGL.
ClassMethod RunBuildManifest(ByRef pVars, pLogLevel As %Integer, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
	#; Let our XGL document generate code for this method.
	quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "BuildManifest")
}

}
