/// This class uses the standard Cache %Installer.Installer class to set up
/// a build environment and build project from source code.
/// Please be aware that running this will completely destroy your environment and then recreate it.
/// For security purposes this class will run only against a namespace containing "BUILD" substring.
Class Util.Build
{

/// This is a main build manifest which create new build environment. See documentation for %Installer.Installer
/// on how to use build manifests.
XData BuildManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
<!-- You have to specify JOBNAME with job name via parameter string -->
<If Condition="&quot;${JOBNAME}&quot;=&quot;&quot;"><Error /></If>
<!-- You have to specify SRCDIR with source code directory via parameter string -->
<If Condition="&quot;${SRCDIR}&quot;=&quot;&quot;"><Error /></If>

<!-- Namespace is named JOBNAME-BUILD to avoid wiping non-build namespace -->
<Var Name="NAMESPACE" Value="${JOBNAME}-BUILD" />

<!-- Define QA filepath for db -->
<Var Name="DBDIR" Value="${CACHEDIR}" />

<!-- Delete old namespace and create new one -->
<Namespace Name="${NAMESPACE}" Create="overwrite" 
  Code="${NAMESPACE}" Data="${NAMESPACE}">
<Configuration>
<Database Name="${NAMESPACE}" Dir="${DBDIR}db/${NAMESPACE}/" Create="overwrite" InitialSize="1" ExpansionSize="1" />
 <CSPApplication name="${NAMESPACE}" Directory="${NAMESPACE}" Url="/csp/${NAMESPACE}"
  Description="Build application" 
  Recurse="true" 
  ServeFiles="true"
   AuthenticationMethods="64" />
</Configuration>

<!-- Import build class to new environment -->
<Import File="${SRCDIR}Build/Util.Build.cls" Flags="c" />

<!-- Invoke compile method -->
<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
<Arg name="dir" Value="${SRCDIR}${PROJECT}" />
<Arg name="wildcards" Value="*.cls" />
<Arg name="qspec" Value="c" />
<Arg name="errorlog" Value="" />
<Arg name="recursive" Value="1" />
</Invoke>

<!-- You may also invoke some post-compile actions like testing or data load here -->
<Invoke Class="Util.Build" Method="UnitTestSetup" CheckStatus="1">
<Arg Value="${SRCDIR}${PROJECT}"/>
</Invoke>

<!-- Use RunTest if we want classes to be deleted from namespace -->
<!-- /nodelete -->
<Invoke Class="%UnitTest.Manager" Method="DebugRunTestCase" CheckStatus="true" >
</Invoke>
<!--<Invoke Class="%UnitTest.Manager" Method="RunTest" CheckStatus="true" >
</Invoke>-->


<!-- Output test results -->
<Invoke Class="Util.Build" Method="OutputResultsXml" CheckStatus="true">
<Arg name="pFileName" Value="${SRCDIR}/TestResult.xml" />
</Invoke>



</Namespace>

<!-- Now, dismount database so we can copy database file -->
<!-- This call is invoked in %SYS namespace -->
<!--<Namespace Name="%SYS">
<Invoke Class="SYS.Database" Method="DismountDatabase" CheckStatus="true">
<Arg name="DatabaseDir" Value="${SRCDIR}db/${NAMESPACE}/" />
</Invoke>
</Namespace> -->

</Manifest>
}

/// FD This method is called to set ^UnitTestRoot path
ClassMethod UnitTestSetup(pUnitTestDir As %String) As %Status
{
	Set ^UnitTestRoot=pUnitTestDir

	Quit 1
}

/// This method is called to pass parameters into generated build method
ClassMethod Build(pJobName As %String, pSrcDir As %String, pProject As %String, pCacheDir As %String) As %Status
{
	set vars("JOBNAME")=$g(pJobName)
	set vars("SRCDIR")=##class(%File).NormalizeDirectory($g(pSrcDir))
	set vars("PROJECT")=$g(pProject)
	set vars("CACHEDIR")=$g(pCacheDir)

	Set pLogLevel=3
	Set sc=..RunBuildManifest(.vars, .pLogLevel)

	Quit sc
}

/// This is a standard %Installer method generator whose code is generated by XGL.
ClassMethod RunBuildManifest(ByRef pVars, pLogLevel As %Integer, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
	#; Let our XGL document generate code for this method.
	quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "BuildManifest")
}

ClassMethod OutputResultsXml(pFileName As %String) As %Status
{
	set File=##class(%File).%New(pFileName)
	set i=$o(^UnitTest.Result(""),-1)
	if i="" quit $$$OK // no results
	
	kill ^||TMP ; results global


	set suite="" for {
		set suite=$o(^UnitTest.Result(i,suite))
		quit:suite=""

		set ^||TMP("S",suite,"time")=$lg(^UnitTest.Result(i,suite),2)
		
		set case="" for {
			set case=$o(^UnitTest.Result(i,suite,case))
			quit:case=""
			
			if $i(^||TMP("S",suite,"tests"))
			set ^||TMP("S",suite,"C",case,"time")=$lg(^UnitTest.Result(i,suite),2)

			set method="" for {
				set method=$o(^UnitTest.Result(i,suite,case,method))
				quit:method=""

				set ^||TMP("S",suite,"C",case,"M",method,"time")=$lg(^UnitTest.Result(i,suite,case,method),2)

				set assert="" for {
					set assert=$o(^UnitTest.Result(i,suite,case,method,assert))
					quit:assert=""
					if $i(^||TMP("S",suite,"assertions"))
					if $i(^||TMP("S",suite,"C",case,"assertions"))
					if $i(^||TMP("S",suite,"C",case,"M",method,"assertions"))
					if $lg(^UnitTest.Result(i,suite,case,method,assert))=0 {
						if $i(^||TMP("S",suite,"failures"))
						if $i(^||TMP("S",suite,"C",case,"failures"))
						if $i(^||TMP("S",suite,"C",case,"M",method,"failures"))
						set ^||TMP("S",suite,"C",case,"M",method,"failure")=$get(^||TMP("S",suite,"C",case,"M",method,"failure"))
							_$lg(^UnitTest.Result(i,suite,case,method,assert),2)
							_": "_$lg(^UnitTest.Result(i,suite,case,method,assert),3)
							_$C(13,10)
					}
				}

				if ($lg(^UnitTest.Result(i,suite,case,method))=0)
				&& ('$d(^||TMP("S",suite,"C",case,"M",method,"assertions"))) {
					if $i(^||TMP("S",suite,"failures"))
					if $i(^||TMP("S",suite,"C",case,"failures"))
					if $i(^||TMP("S",suite,"C",case,"M",method,"failures"))
					set ^||TMP("S",suite,"C",case,"M",method,"failure")=$get(^||TMP("S",suite,"C",case,"M",method,"failure"))
						_$lg(^UnitTest.Result(i,suite,case,method),3)
						_": "_$lg(^UnitTest.Result(i,suite,case,method),4)
						_$C(13,10)
				}

			}
			
			if $lg(^UnitTest.Result(i,suite,case))=0
			&& ('$d(^||TMP("S",suite,"C",case,"M"))) {
				if $i(^||TMP("S",suite,"failures"))
				if $i(^||TMP("S",suite,"C",case,"failures"))
				if $i(^||TMP("S",suite,"C",case,"M",case,"failures"))
				set ^||TMP("S",suite,"C",case,"M",case,"failure")=$get(^||TMP("S",suite,"C",case,"M",case,"failure"))
					_$lg(^UnitTest.Result(i,suite,case),3)
					_": "_$lg(^UnitTest.Result(i,suite,case),4)
					_$C(13,10)
			}

		}
	}
	
	do File.Open("WSN")
	do File.WriteLine("<?xml version=""1.0"" encoding=""UTF-8"" ?>")
	do File.WriteLine("<testsuites>")
	set suite="" for {
		set suite=$o(^||TMP("S",suite))
		quit:suite=""

		do File.Write("<testsuite")
		do File.Write(" name="""_$zcvt(suite,"O","XML")_"""")
		do File.Write(" assertions="""_$g(^||TMP("S",suite,"assertions"))_"""")
		do File.Write(" time="""_$g(^||TMP("S",suite,"time"))_"""")
		do File.Write(" tests="""_$g(^||TMP("S",suite,"tests"))_"""")
		do File.WriteLine(">")

		set case="" for {
			set case=$o(^||TMP("S",suite,"C",case))
			quit:case=""

			do File.Write("<testsuite")
			do File.Write(" name="""_$zcvt(case,"O","XML")_"""")
			do File.Write(" assertions="""_$g(^||TMP("S",suite,"C",case,"assertions"))_"""")
			do File.Write(" time="""_$g(^||TMP("S",suite,"C",case,"time"))_"""")
			do File.Write(" tests="""_$g(^||TMP("S",suite,"C",case,"tests"))_"""")
			do File.WriteLine(">")

			
			set method="" for {
				set method=$o(^||TMP("S",suite,"C",case,"M",method))
				quit:method=""

				do File.Write("<testcase")
				do File.Write(" name="""_$zcvt(method,"O","XML")_"""")
				do File.Write(" assertions="""_$g(^||TMP("S",suite,"C",case,"M",method,"assertions"))_"""")
				do File.Write(" time="""_$g(^||TMP("S",suite,"C",case,"M",method,"time"))_"""")
				do File.WriteLine(">")
				if $d(^||TMP("S",suite,"C",case,"M",method,"failure")) {
					do File.Write("<failure type=""cache-error"" message=""Cache Error"">")
					do File.Write($zcvt(^||TMP("S",suite,"C",case,"M",method,"failure"),"O","XML"))
					do File.WriteLine("</failure>")
				}
				do File.WriteLine("</testcase>")
			}
			do File.WriteLine("</testsuite>")
		}
		do File.WriteLine("</testsuite>")
	}
	do File.WriteLine("</testsuites>")

	do File.Close()
	kill ^||TMP
	quit $$$OK
}

}
